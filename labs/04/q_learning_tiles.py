#!/usr/bin/env python3
import numpy as np
import random

import mountain_car_evaluator

TENSORS_ENABLED_LOL = False
# TENSORS_ENABLED_LOL = True


if TENSORS_ENABLED_LOL:
    import glob
    import os
    import tensorflow as tf
    tf.enable_eager_execution()


if __name__ == "__main__":
    # Fix random seed
    np.random.seed(42)

    # Parse arguments
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--episodes", default=10000, type=int, help="Training episodes.")
    parser.add_argument("--render_each", default=500, type=int, help="Render some episodes.")

    parser.add_argument("--alpha", default=0.1, type=float, help="Learning rate.")
    parser.add_argument("--alpha_final", default=1e-3, type=float, help="Final learning rate.")
    parser.add_argument("--epsilon", default=0.2, type=float, help="Exploration factor.")
    parser.add_argument("--epsilon_final", default=0.03, type=float, help="Final exploration factor.")
    parser.add_argument("--gamma", default=0.99, type=float, help="Discounting factor.")
    parser.add_argument("--tiles", default=8, type=int, help="Number of tiles.")
    args = parser.parse_args()

    # Create the environment
    env = mountain_car_evaluator.environment(tiles=args.tiles)

    # Implement Q-learning RL algorithm, using linear approximation.
    W = np.load("W.npy")

    # import base64
    # Wbytes = b''
    # W = np.copy(np.frombuffer(base64.decodestring(Wbytes), dtype=np.float64).reshape(631, 3))


    # W = np.zeros([env.weights, env.actions])
    epsilon = args.epsilon
    alpha = args.alpha / args.tiles

    if TENSORS_ENABLED_LOL:
        maxname = max([int(name.replace("logs/", "")) for name in glob.glob("logs/*")])
        logdir = "./logs/{}".format(maxname + 1)
        print("Logging into {}".format(logdir))

        global_step = tf.train.get_or_create_global_step()
        writer = tf.contrib.summary.create_file_writer(logdir)
        writer.set_as_default()

    def onehot(x):
        result = np.zeros(env.weights)
        for i in x:
            result[i] = 1

        return result

    def Q(state):
        return onehot(state) @ W

    best_score = -1000.0

    evaluating = False
    while not evaluating:
        # Perform a training episode
        state, done = env.reset(evaluating), False
        while not done:
            # if args.render_each and env.episode and env.episode % args.render_each == 0:
            #     env.render()

            Qsa = Q(state)

            # TODO: Choose `action` according to epsilon-greedy strategy
            if random.random() < epsilon:
                action = random.randint(0, env.actions - 1)
            else:
                action = Qsa.argmax()

            next_state, reward, done, _ = env.step(action)

            # TODO: Update W values
            gradient = (reward + args.gamma * Q(next_state).max() - Q(state)[action])
            W[state, action] += alpha * gradient

            if TENSORS_ENABLED_LOL:
                global_step.assign_add(1)

                # with tf.contrib.summary.record_summaries_every_n_global_steps(5000):
                if global_step.numpy().item() % 1000 == 0:
                    with tf.contrib.summary.always_record_summaries():
                        tf.contrib.summary.histogram("W", W.reshape(-1))
                        tf.contrib.summary.histogram("gradient", gradient.reshape(-1))
                        tf.contrib.summary.scalar("gradient_norm", tf.norm(gradient))
                        tf.contrib.summary.scalar("epsilon", epsilon)
                        tf.contrib.summary.scalar("alpha", alpha)


            state = next_state
            if done:
                break

        # TODO: Decide if we want to start evaluating
        if args.render_each and env.episode and env.episode % args.render_each == 0:
            rewards = []

            for i in range(100):
                state, done = env.reset(evaluating), False

                total_reward = 0
                while not done:
                    # if i == 0:
                    #     env.render()

                    action = Q(state).argmax()
                    state, reward, done, _ = env.step(action)
                    total_reward += reward

                rewards.append(total_reward)

            mean_reward = sum(rewards) / 100.
            print("TOTAL: {}".format(mean_reward))

            if mean_reward > best_score:
                best_score = mean_reward
                np.save("W", W)

            if mean_reward > -100:
                print("DONE!")
                evaluating = True


        if not evaluating:
            if args.epsilon_final:
                epsilon = np.exp(np.interp(env.episode + 1, [0, args.episodes], [np.log(args.epsilon), np.log(args.epsilon_final)]))
            if args.alpha_final:
                alpha = np.exp(np.interp(env.episode + 1, [0, args.episodes], [np.log(args.alpha), np.log(args.alpha_final)])) / args.tiles

    # Perform the final evaluation episodes
    while True:
        state, done = env.reset(evaluating), False
        while not done:
            # TODO: choose action as a greedy action
            action = Q(state).argmax()
            state, reward, done, _ = env.step(action)
